module tb_traffic_light_module;

    logic clk, reset, sensor_A, sensor_B;
    logic [2:0] light_A, light_B;

    traffic_light_module dut(clk, reset, sensor_A, sensor_B, light_A, light_B);

    initial begin
        reset = 0; 
        sensor_A = 0; sensor_B = 0; #10;
        sensor_A = 0; sensor_B = 1; #10;
        sensor_A = 1; sensor_B = 0; #10;
        sensor_A = 0; sensor_B = 0; #10;
        $finish;  
    end

    always begin
        #5 clk = ~clk;  
    end

endmodule

module traffic_light_module (
    input logic clock, reset, sensor_A, sensor_B, 
    output logic [2:0] light_A, light_B);
    
    Clock c(clock, slow_clock);

    typedef enum logic [2:0] {s0, s1, s2, s3, s4, s5, s6, s7} StateType;
    StateType [1:0] current_state, next_state;
    
    parameter green = 3'b011;
    parameter yellow = 3'b001;
    parameter red = 3'b111;
    
    always_ff @(posedge slow_clock, posedge reset)
        if (reset) current_state <= s0;
        else current_state <= next_state;
    
    always_comb
    case (current_state)
        s0: if (sensor_B) next_state = s0;
            else next_state = s1;
        s1: next_state = s2;
        s2: next_state = s3;
        s3: next_state = s4;
        s4: if (sensor_A) next_state = s4;
            else next_state = s5;
        s5: next_state = s6;
        s6: next_state = s7;
        s7: next_state = s0;
        default: next_state = s0;
    endcase
    
    always_comb
    case (current_state)
        s0: {light_A, light_B} = {green, red};
        s1: {light_A, light_B} = {yellow, red};
        s2: {light_A, light_B} = {red, red};
        s3: {light_A, light_B} = {red, yellow};
        s4: {light_A, light_B} = {red, green};
        s5: {light_A, light_B} = {red, yellow};
        s6: {light_A, light_B} = {red, red};
        s7: {light_A, light_B} = {yellow, red};
        default: {light_A, light_B} = {green, red};
    endcase 
endmodule

module Clock(input clk, output slow_clk);
    logic [31:0] timer = 0;
    logic out;
    
    always @(posedge clk)
        begin
            timer <= timer + 1;
            if (timer == 150000000)
            begin
                timer <= 0;
                out = ~out;
            end
        end
    
    assign slow_clk = out;
endmodule

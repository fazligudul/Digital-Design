
`timescale 1ns / 1ps

module full_adder(
    input a,b,cin,
    output sum,carry
    );
    
    wire s1,c1,c2;
    
    half_adder HA1(a,b,s1,c1);
    half_adder HA2(s1,cin,sum,c2);
    assign carry = c1 | c2;
endmodule




module half_adder(
    input a,b,
    output s,
    output c
    );
    assign s = a ^ b;
    assign c = a & b;
endmodule




module stimuli(     );
    wire sum,carry;
    reg a,b,cin;
    
    full_adder dut(a,b,cin,sum,carry);
    
    initial
    begin
        a=0;b=0;cin=0;
    #10 a=0;b=0;cin=1;
    #10 a=0;b=1;cin=0;
    #10 a=0;b=1;cin=1;
    #10 a=1;b=0;cin=0;
    #10 a=1;b=0;cin=1;
    #10 a=1;b=1;cin=0;
    #10 a=1;b=1;cin=1;
    #10 $finish;
    end
endmodule


# Switches
set_property PACKAGE_PIN V17 [get_ports {a}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {a}]
set_property PACKAGE_PIN V16 [get_ports {b}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {b}]
set_property PACKAGE_PIN W16 [get_ports {cin}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {cin}]
 
# LEDs
set_property PACKAGE_PIN U16 [get_ports {sum}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {sum}]
set_property PACKAGE_PIN E19 [get_ports {carry}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {carry}]



`timescale 1ns / 1ps

module full_sb(
input logic a,b,Bin,
    output logic Diff,Bout
    );
    
    assign Diff = a ^ b ^ Bin;
    assign Bout = (~a & (b | Bin)) | (b & Bin);
endmodule

set_property PACKAGE_PIN U1 [get_ports {Bin}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {Bin}]
set_property PACKAGE_PIN T1 [get_ports {b}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {b}]
set_property PACKAGE_PIN R2 [get_ports {a}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {a}]
 
set_property PACKAGE_PIN P1 [get_ports {Diff}]					
        set_property IOSTANDARD LVCMOS33 [get_ports {Diff}]
    set_property PACKAGE_PIN L1 [get_ports {Bout}]                    
        set_property IOSTANDARD LVCMOS33 [get_ports {Bout}]

`timescale 1ns / 1ps

module fs_test( );
reg A, B, Bin, Diff, Bout;
full_sb dut(A, B, Bin, Diff, Bout);
initial begin
A = 0; B = 0; Bin = 0; #10;
A = 0; B = 0; Bin = 1; #10;
A = 0; B = 1; Bin = 0; #10;
A = 0; B = 1; Bin = 1; #10;

A = 1; B = 0; Bin = 0; #10;
A = 1; B = 0; Bin = 1; #10;
A = 1; B = 1; Bin = 0; #10;
A = 1; B = 1; Bin = 1; #10;
end
endmodule
